// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Common cases Admin 1`] = `
"directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION | ENUM | ENUM_VALUE | INTERFACE | UNION | INPUT_OBJECT | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | SCALAR

enum Role {
  ADMIN
  REVIEWER
  USER
  GUEST
}

enum EnumPublic {
  PUBLIC
  PUBLIC2
}

enum EnumPartial {
  PUBLIC
  PRIVATE
}

enum EnumPrivate {
  ValuePrivate1
  ValuePrivate2
}

enum EnumEmpty {
  PRIVATE1
  PRIVATE2
}

interface IPublic {
  id: ID!
  iPrivate: Int!
}

type OPublic implements IPublic {
  id: ID!
  iPrivate: Int!
  public: String!
}

type OPrivate implements IPublic {
  id: ID!
  iPrivate: Int!
  private: String!
}

interface IPrivate {
  privateId: ID!
}

type OPrivate2 implements IPrivate {
  privateId: ID!
  private2: String!
}

interface IEmpty {
  idEmptyPrivate: ID!
  iEmptyPrivate: Int!
}

type OEmpty implements IEmpty {
  idEmptyPrivate: ID!
  iEmptyPrivate: Int!
  filled: Boolean!
}

type PublicType {
  value: String!
}

type User {
  name: String!
  roleProtected: String!
  roleForAdmin: String!
}

type Book {
  title: String!
  author: String!
}

type Empty {
  idEmptyPrivate: ID!
  emptyPrivate: Int!
}

union Public = Empty | User | OEmpty

union Private = Empty | User | OEmpty

input InPublic {
  param1: String
  param2: String
  param2private: String
}

input InProtected {
  param1protected: String
  param2protected: String
}

input InPrivate {
  param1private: String
  param2private: String
}

input InEmpty {
  empty1private: String
  empty2private: String
}

scalar Text

scalar ProtectedText

scalar PrivateText

type Query {
  me: User!
  tPublic: PublicType!
  iPublic: IPublic!
  iPrivate: IPrivate!
  iEmpty: IEmpty!
  empty: Empty!
  uPublic: [Public!]!
  uPrivate: [Private!]!
  meProtected: User!
  books: [Book!]!
  args1(argPublic: String!): Int!
  args2(argProtected: String!): Int!
  args3(argPrivate: String!): Int!
  args4(argPublic: String!, argPrivate: String!): Int!
  args5(argPublic: String!, argPrivate: String!, argLast: String!): Int!
  args6(argPrivate: String!, argLast: String!): Int!
  args7(argProtected: String!, argPrivate: String!, argLast: String!): Int!
}

type Mutation {
  mutate: String!
}

type Subscription {
  subscribe: Int!
}
"
`;

exports[`Common cases Guest 1`] = `
"enum EnumPublic {
  PUBLIC
  PUBLIC2
}

enum EnumPartial {
  PUBLIC
}

enum EnumEmpty

interface IPublic {
  id: ID!
}

type OPublic implements IPublic {
  id: ID!
  public: String!
}

interface IEmpty

type OEmpty implements IEmpty {
  filled: Boolean!
}

type PublicType {
  value: String!
}

type User {
  name: String!
}

type Empty

union Public = Empty | User | OEmpty

input InPublic {
  param1: String
  param2: String
}

input InEmpty

scalar Text

type Query {
  me: User!
  tPublic: PublicType!
  iPublic: IPublic!
  iEmpty: IEmpty!
  empty: Empty!
  uPublic: [Public!]!
  args1(argPublic: String!): Int!
  args2: Int!
  args3: Int!
  args4(argPublic: String!): Int!
  args5(argPublic: String!, argLast: String!): Int!
  args6(argLast: String!): Int!
  args7(argLast: String!): Int!
}

type Mutation {
  mutate: String!
}

type Subscription {
  subscribe: Int!
}
"
`;

exports[`Common cases User 1`] = `
"enum Role {
  ADMIN
  REVIEWER
  USER
  GUEST
}

enum EnumPublic {
  PUBLIC
  PUBLIC2
}

enum EnumPartial {
  PUBLIC
}

enum EnumEmpty

interface IPublic {
  id: ID!
}

type OPublic implements IPublic {
  id: ID!
  public: String!
}

interface IEmpty

type OEmpty implements IEmpty {
  filled: Boolean!
}

type PublicType {
  value: String!
}

type User {
  name: String!
  roleProtected: String!
}

type Empty

union Public = Empty | User | OEmpty

input InPublic {
  param1: String
  param2: String
}

input InProtected {
  param1protected: String
  param2protected: String
}

input InEmpty

scalar Text

scalar ProtectedText

type Query {
  me: User!
  tPublic: PublicType!
  iPublic: IPublic!
  iEmpty: IEmpty!
  empty: Empty!
  uPublic: [Public!]!
  meProtected: User!
  args1(argPublic: String!): Int!
  args2(argProtected: String!): Int!
  args3: Int!
  args4(argPublic: String!): Int!
  args5(argPublic: String!, argLast: String!): Int!
  args6(argLast: String!): Int!
  args7(argProtected: String!, argLast: String!): Int!
}

type Mutation {
  mutate: String!
}

type Subscription {
  subscribe: Int!
}
"
`;
